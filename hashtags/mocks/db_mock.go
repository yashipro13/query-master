// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/yashipro13/queryMaster/hashtags (interfaces: DBManager)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/yashipro13/queryMaster/models"
)

// MockDBManager is a mock of DBManager interface.
type MockDBManager struct {
	ctrl     *gomock.Controller
	recorder *MockDBManagerMockRecorder
}

// MockDBManagerMockRecorder is the mock recorder for MockDBManager.
type MockDBManagerMockRecorder struct {
	mock *MockDBManager
}

// NewMockDBManager creates a new mock instance.
func NewMockDBManager(ctrl *gomock.Controller) *MockDBManager {
	mock := &MockDBManager{ctrl: ctrl}
	mock.recorder = &MockDBManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBManager) EXPECT() *MockDBManagerMockRecorder {
	return m.recorder
}

// GetProjectByHashtags mocks base method.
func (m *MockDBManager) GetProjectByHashtags(arg0 context.Context, arg1 []string) ([]models.Project, *models.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectByHashtags", arg0, arg1)
	ret0, _ := ret[0].([]models.Project)
	ret1, _ := ret[1].(*models.Error)
	return ret0, ret1
}

// GetProjectByHashtags indicates an expected call of GetProjectByHashtags.
func (mr *MockDBManagerMockRecorder) GetProjectByHashtags(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectByHashtags", reflect.TypeOf((*MockDBManager)(nil).GetProjectByHashtags), arg0, arg1)
}
